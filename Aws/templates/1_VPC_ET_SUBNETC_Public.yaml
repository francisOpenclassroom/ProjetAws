#TODO: aws cloudformation deploy --template-file 1_VPC_ET_SUBNETC_Public --stack-name TestVPC

AWSTemplateFormatVersion: "2010-09-09"

Description: >-

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: "VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-3a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "AZ 3a"

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-3b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "AZ 3b"

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-3c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "AZ 3c"

  TableRoutage:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RoutesInternet:
    Type: AWS::EC2::Route
    DependsOn: VPCGWAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref TableRoutage

  AssociationRoutesSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref TableRoutage

  AssociationRoutesSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref TableRoutage

  AssociationRoutesSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetC
      RouteTableId: !Ref TableRoutage

  SgPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SSH vers Instances"
      GroupName: "Trafic Internet"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

#  InstanceTest:
#    Type: AWS::EC2::Instance
#    Properties:
#      InstanceType: t2.micro
#      ImageId: ami-00798d7180f25aac2
#      KeyName: !Ref KeyName
#      SubnetId: !Ref SubnetC
#      PrivateIpAddress: 10.0.2.10
#      SecurityGroupIds:
#        - !GetAtt SgPublic.GroupId

Outputs:

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  SubnetC:
    Description: The subnet ID to use for public web servers
    Value: !Ref SubnetC
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCID'
  ServerSecurityGroup:
    Description: The security group ID to use for public web servers
    Value: !GetAtt
      - SgPublic
      - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupID'
