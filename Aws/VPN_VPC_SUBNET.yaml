AWSTemplateFormatVersion: 2010-09-09
Description: >-

Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  VPNAddress:
    Type: String
    Description: IP Address of your VPN device
    MinLength: '7'
    MaxLength: '15'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP address of the form x.x.x.x

Resources:
  VpcPrive:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: VPC PRIVE
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcPrive
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 'eu-west-3c'
      Tags:
        - Key: Name
          Value: Subnet Prive
  VPNGateway:
    Type: 'AWS::EC2::VPNGateway'
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
  VPNGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VpcPrive
      VpnGatewayId: !Ref VPNGateway

  CustomerGateway:
    Type: 'AWS::EC2::CustomerGateway'
    Properties:
      Type: ipsec.1
      BgpAsn: '65000'
      IpAddress: !Ref VPNAddress
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: VPN
          Value: !Join
            - ''
            - - 'Gateway to '
              - !Ref VPNAddress
  VPNConnection:
    Type: 'AWS::EC2::VPNConnection'
    Properties:
      Type: ipsec.1
      StaticRoutesOnly: 'true'
      CustomerGatewayId: !Ref CustomerGateway
      VpnGatewayId: !Ref VPNGateway

  VPNConnectionRoute:
    Type: 'AWS::EC2::VPNConnectionRoute'
    Properties:
      VpnConnectionId: !Ref VPNConnection
      DestinationCidrBlock: "10.0.100.0/24"

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcPrive
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: VPN Connected Subnet

  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH  via port 22 - HTTP via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum -y update
          sudo amazon-linux-extras install docker
          sudo service docker start
          sudo systemctl enable docker
          sudo usermod -a -G docker ec2-user
          sudo docker run -tid --restart always -p 80:80 --name web nginx:latest
      InstanceType: 't2.micro'
      NetworkInterfaces:
        - SubnetId: !Ref PrivateSubnet
          AssociatePublicIpAddress: 'false'
          PrivateIpAddress:  "10.0.0.100"
          DeviceIndex: '0'
          GroupSet:
            - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-00798d7180f25aac2
      AvailabilityZone: 'eu-west-3c'
      Tags:
        - Key: Name
          Value: "Test EC2"
