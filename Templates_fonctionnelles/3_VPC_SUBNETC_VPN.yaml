#TODO: aws cloudformation deploy --template-file 3_VPC_SUBNETC_VPN.yaml --stack-name TestVPC --parameter-overrides VPNAddress=89.159.94.43

AWSTemplateFormatVersion: "2010-09-09"

Description: >-

Parameters:


  VPNAddress:
    Type: String
    Description: IP Address of your VPN device
    MinLength: '7'
    MaxLength: '15'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP address of the form x.x.x.x

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: "VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-3a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "AZ 3a"

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-3b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "AZ 3b"

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-3c
      # 6 - Suppression de l'adresse publique
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "AZ 3c"

  TableRoutage:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RoutesInternet:
    Type: AWS::EC2::Route
    DependsOn: VPCGWAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref TableRoutage

  AssociationRoutesSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref TableRoutage

  AssociationRoutesSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref TableRoutage

  AssociationRoutesSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetC
      # 5 - Modification de la table de routage pour le Subnet C
      RouteTableId: !Ref PrivateRouteTable

  SgPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SSH vers Instances"
      GroupName: "Trafic Internet"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
# 1 - VPN Gateway
  VPNGateway:
    Type: 'AWS::EC2::VPNGateway'
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

# 2 - VPN Gateway Attachment
  VPNGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      VpnGatewayId: !Ref VPNGateway

# 3 - Customer Gateway
  CustomerGateway:
    Type: 'AWS::EC2::CustomerGateway'
    Properties:
      Type: ipsec.1
      BgpAsn: '65000'
      IpAddress: !Ref VPNAddress
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: VPN
          Value: !Join
            - ''
            - - 'Gateway to '
              - !Ref VPNAddress

# 3 - Connection VPN
  VPNConnection:
    Type: 'AWS::EC2::VPNConnection'
    Properties:
      Type: ipsec.1
      StaticRoutesOnly: 'true'
      CustomerGatewayId: !Ref CustomerGateway
      VpnGatewayId: !Ref VPNGateway

# 4 - Table de routage Reseau Privé
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: VPN Connected Subnet

# 7 - Route pour le réseau privé vers la VPNGateway
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPNGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPNGateway

 # 8 - Regles réseau Privé
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Private

# 9 - Regles réseau Privé entrant
  InboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

# 9 - Regles réseau Privé sortant
  OutBoundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

# 10 - Association de l'ACL au SubnetC
  PrivateSubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetC
      NetworkAclId: !Ref PrivateNetworkAcl



Outputs:

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  SubnetC:
    Description: The subnet ID to use for public web servers
    Value: !Ref SubnetC
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCID'
  ServerSecurityGroup:
    Description: The security group ID to use for public web servers
    Value: !GetAtt
      - SgPublic
      - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupID'
